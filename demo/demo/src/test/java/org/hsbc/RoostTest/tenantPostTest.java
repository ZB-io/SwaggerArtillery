// ********RoostGPT********
/*
Test generated by RoostGPT for test raml-testing using AI Type Open AI and AI Model gpt-4

Test generated for /_/tenant_post for http method type POST in rest-assured framework

RoostTestHash=4b8c14d754


*/

// ********RoostGPT********
package org.hsbc.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class tenantPostTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {"version"};
      envList = dataloader.load("src/test/java/org/hsbc/RoostTest/__tenantPostTest.csv", envVarsList);
    }

  
    @Test  
    public void tenantPost_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "http://localhost:8081/{version}";  
  
                Response responseObj = given()
				.contentType(ContentType.JSON)
				.body("{\n"+
					"  \"module_from\": \"" + (testData.get("module_from") != null ? testData.get("module_from") : "") + "\",\n" +
					"  \"module_to\": \"" + (testData.get("module_to") != null ? testData.get("module_to") : "") + "\",\n" +
					"  \"purge\": \"" + (testData.get("purge") != null ? testData.get("purge") : "") + "\",\n" +
					"  \"parameters\": \"" + (testData.get("parameters") != null ? testData.get("parameters") : "") + "\n" +
 				"}")
                .when()
                .post("/_/tenant")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              System.out.printf("Test Case %d: tenantPost_Test \n", testNumber++);
              System.out.println("Request: POST /_/tenant");
              System.out.println("Status Code: " + responseObj.statusCode());
              if (testData.get("statusCode") != null) {
                MatcherAssert.assertThat(responseObj.statusCode(),
                    equalTo(Integer.parseInt(testData.get("statusCode"))));
              }
             else{
                 List<Integer> expectedStatusCodes = Arrays.asList(201,204,400,422,500);
              MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
                 }
              
        switch(responseObj.statusCode()){
        
          case 201:
         
          case 422:
         
           MatcherAssert.assertThat(contentType, equalTo("application/json"));
           break;
        
    }
      
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if (responseObj.statusCode() == 201) {
					System.out.println("Description: Tenant job created");
      
              if (response.get("id") != null) {  
                MatcherAssert.assertThat(response.get("id"), instanceOf(String.class));  
          }
      
              if (response.get("tenant") != null) {  
                MatcherAssert.assertThat(response.get("tenant"), instanceOf(String.class));  
          }
      
              if (response.get("tenantAttributes") != null) {      
              if (response.get("tenantAttributes.module_from") != null) {  
                MatcherAssert.assertThat(response.get("tenantAttributes.module_from"), instanceOf(String.class));  
          }
      
              if (response.get("tenantAttributes.module_to") != null) {  
                MatcherAssert.assertThat(response.get("tenantAttributes.module_to"), instanceOf(String.class));  
          }
      
              if (response.get("tenantAttributes.purge") != null) {  
                MatcherAssert.assertThat(response.get("tenantAttributes.purge"), instanceOf(Boolean.class));  
          }
      
              if (response.get("tenantAttributes.parameters") != null) {        
                  for (int i = 0; i < response.getList("tenantAttributes.parameters").size(); i++) {      
              if (response.get("tenantAttributes.parameters["+ i +"].key") != null) {  
                MatcherAssert.assertThat(response.get("tenantAttributes.parameters["+ i +"].key"), instanceOf(String.class));  
          }
      
              if (response.get("tenantAttributes.parameters["+ i +"].value") != null) {  
                MatcherAssert.assertThat(response.get("tenantAttributes.parameters["+ i +"].value"), instanceOf(String.class));  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("tenantAttributes.parameters"), instanceOf(List.class));
  
          }
  
          }
      
              if (response.get("complete") != null) {  
                MatcherAssert.assertThat(response.get("complete"), instanceOf(Boolean.class));  
          }
      
              if (response.get("error") != null) {  
                MatcherAssert.assertThat(response.get("error"), instanceOf(String.class));  
          }
      
              if (response.get("messages") != null) {      
                for (int i = 0; i < response.getList("messages").size(); i++) {      
                  }    
                MatcherAssert.assertThat(response.getList("messages"), instanceOf(List.class));
  
          }
				}
if (responseObj.statusCode() == 204) {
					System.out.println("Description: Job completed");
				}
if (responseObj.statusCode() == 400) {
					System.out.println("Description: Bad user request");
				}
if (responseObj.statusCode() == 422) {
					System.out.println("Description: Validation errors");
      
              if (response.get("errors") != null) {        
                  for (int i = 0; i < response.getList("errors").size(); i++) {      
              if (response.get("errors["+ i +"].message") != null) {  
                MatcherAssert.assertThat(response.get("errors["+ i +"].message"), instanceOf(String.class));  
          }
      
              if (response.get("errors["+ i +"].type") != null) {  
                MatcherAssert.assertThat(response.get("errors["+ i +"].type"), instanceOf(String.class));  
          }
      
              if (response.get("errors["+ i +"].code") != null) {  
                MatcherAssert.assertThat(response.get("errors["+ i +"].code"), instanceOf(String.class));  
          }
      
              if (response.get("errors["+ i +"].parameters") != null) {        
                  for (int i1 = 0; i1 < response.getList("errors["+ i +"].parameters").size(); i1++) {      
              if (response.get("errors["+ i +"].parameters["+ i1 +"].key") != null) {  
                MatcherAssert.assertThat(response.get("errors["+ i +"].parameters["+ i1 +"].key"), instanceOf(String.class));  
          }
      
              if (response.get("errors["+ i +"].parameters["+ i1 +"].value") != null) {  
                MatcherAssert.assertThat(response.get("errors["+ i +"].parameters["+ i1 +"].value"), instanceOf(String.class));  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("errors["+ i +"].parameters"), instanceOf(List.class));
  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("errors"), instanceOf(List.class));
  
          }
      
              if (response.get("total_records") != null) {  
                MatcherAssert.assertThat(response.get("total_records"), instanceOf(Integer.class));  
          }
				}
if (responseObj.statusCode() == 500) {
					System.out.println("Description: Internal error");
				}


            }  
    }
}
