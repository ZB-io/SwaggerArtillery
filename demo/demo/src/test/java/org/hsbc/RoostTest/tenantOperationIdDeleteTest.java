// ********RoostGPT********
/*
Test generated by RoostGPT for test raml-testing using AI Type Open AI and AI Model gpt-4

Test generated for /_/tenant/{operation_id}_delete for http method type DELETE in rest-assured framework

RoostTestHash=406671589b


*/

// ********RoostGPT********
package org.hsbc.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class tenantOperationIdDeleteTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {"operation_id", "version"};
      envList = dataloader.load("src/test/java/org/hsbc/RoostTest/__tenant_operation_idDeleteTest.csv", envVarsList);
    }

  
    @Test  
    public void tenantOperationIdDelete_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "http://localhost:8081/{version}";  
  
                Response responseObj = given()
                .when()
                .delete("/_/tenant/{operation_id}")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              System.out.printf("Test Case %d: tenantOperationIdDelete_Test \n", testNumber++);
              System.out.println("Request: DELETE /_/tenant/{operation_id}");
              System.out.println("Status Code: " + responseObj.statusCode());
              if (testData.get("statusCode") != null) {
                MatcherAssert.assertThat(responseObj.statusCode(),
                    equalTo(Integer.parseInt(testData.get("statusCode"))));
              }
             else{
                 List<Integer> expectedStatusCodes = Arrays.asList(204,400,404,500);
              MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
                 }
              
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if (responseObj.statusCode() == 204) {
					System.out.println("Description: Job deleted ok");
				}
if (responseObj.statusCode() == 400) {
					System.out.println("Description: User error");
				}
if (responseObj.statusCode() == 404) {
					System.out.println("Description: Not found");
				}
if (responseObj.statusCode() == 500) {
					System.out.println("Description: Internal error");
				}


            }  
    }
}
